### What is **Scope** in Python?

**Scope** means **where** in your code a variable or name can be accessed or used.

Think of it like different rooms in a house:

* Some toys (variables) are only in the bedroom.
* Some toys are in the living room.
* You can only play with toys if you are in the same room.

---

### Types of Scopes in Python

1. **Local Scope**

   * Variables created **inside a function**.
   * They live only **inside that function**.
   * You cannot use them outside the function.

2. **Global Scope**

   * Variables created **outside all functions**.
   * They can be used **anywhere** in the code, including inside functions (unless overwritten).

3. **Enclosing Scope** (for nested functions)

   * If you have a function inside another function, the inner function can use variables from the outer function.

4. **Built-in Scope**

   * Python’s built-in names like `print()`, `len()`, etc.
   * These are always available.

---

### Example to understand Local and Global Scopes:

```python
x = 10  # Global variable

def my_function():
    y = 5  # Local variable
    print("Inside function, x =", x)  # Can access global x
    print("Inside function, y =", y)  # Can access local y

my_function()

print("Outside function, x =", x)  # Can access global x
print("Outside function, y =", y)  # Error! y does not exist here
```

Output:

```
Inside function, x = 10
Inside function, y = 5
Outside function, x = 10
NameError: name 'y' is not defined
```

---

### Quick summary:

| Scope Type | Where Variable is Created         | Where It Can Be Used       |
| ---------- | --------------------------------- | -------------------------- |
| Local      | Inside a function                 | Only inside that function  |
| Global     | Outside all functions             | Anywhere in the file       |
| Enclosing  | Outer function of nested function | Inner nested function only |
| Built-in   | Python built-in names             | Anywhere                   |




---

### Exercise 1: Local vs Global

```python
a = 5  # Global variable

def test():
    a = 10  # Local variable inside function
    print("Inside function:", a)

test()
print("Outside function:", a)
```

**Output:**

```
Inside function: 10
Outside function: 5
```

**Explanation:**
Inside the function, `a` is a **local** variable (10). Outside, `a` is the global variable (5). They are two different variables.

---

### Exercise 2: Accessing Global Inside Function

```python
b = 3  # Global variable

def show():
    print("Value of b inside function:", b)

show()
print("Value of b outside function:", b)
```

**Output:**

```
Value of b inside function: 3
Value of b outside function: 3
```

**Explanation:**
Inside the function, Python uses the global `b` because there is no local `b`.

---

### Exercise 3: Changing Global Inside Function (without `global` keyword)

```python
c = 7  # Global variable

def change():
    c = 20  # Local variable, shadows global c
    print("Inside function:", c)

change()
print("Outside function:", c)
```

**Output:**

```
Inside function: 20
Outside function: 7
```

**Explanation:**
Inside the function, `c` is local and shadows the global `c`. The global `c` is unchanged outside.

---

### Exercise 4: Changing Global with `global` keyword

```python
d = 2  # Global variable

def change_global():
    global d
    d = 50
    print("Inside function:", d)

change_global()
print("Outside function:", d)
```

**Output:**

```
Inside function: 50
Outside function: 50
```

**Explanation:**
The `global` keyword tells Python to use the global variable `d`. So, changing it inside the function affects the global `d`.

---

### Exercise 5: Nested Functions and Enclosing Scope

```python
def outer():
    e = 100

    def inner():
        print("Inside inner:", e)

    inner()

outer()
```

**Output:**

```
Inside inner: 100
```

**Explanation:**
The inner function can access the variable `e` from its **enclosing** function `outer`.

 Understanding when and how often you’ll use **Python scopes** as a Django developer or a DevOps engineer is very practical.

---

### As a **Django Developer**

* **Daily use:**
  You *constantly* deal with scopes because your code involves many functions, classes, views, models, and nested logic.
  Examples:

  * Writing views and functions with local variables.
  * Using global constants or settings (like Django `settings.py` variables).
  * Nested functions or closures (less common but useful sometimes).
  * Managing variable scopes to avoid bugs (e.g., not accidentally overwriting global variables).

* **Why important?**
  If you don’t understand scopes well, you might:

  * Accidentally overwrite variables.
  * Have hard-to-find bugs because of variable shadowing.
  * Fail to manage state properly in views or forms.

---

### As a **DevOps Engineer**

* **Occasional but important use:**
  DevOps often involves writing Python scripts for automation, monitoring, or infrastructure management.
  Examples:

  * Writing scripts/functions for deployment, backups, or log parsing.
  * Using global config variables for environment settings.
  * Organizing code into reusable functions and modules where local/global scopes matter.

* **Why important?**

  * Helps you write clean, maintainable automation scripts.
  * Avoids bugs caused by variable misuse in complex scripts.
  * Keeps your scripts modular and easier to troubleshoot.

---

### Summary

| Role             | How often scopes matter     | Why important                                  |
| ---------------- | --------------------------- | ---------------------------------------------- |
| Django Developer | Daily, all the time         | Manage variables in views, models, forms, etc. |
| DevOps Engineer  | Often in automation scripts | Organize reusable scripts and avoid bugs       |

---

 Let me show you simple examples for **Django** and **DevOps** where scopes matter.

---

### 1) Django Example — Using Local and Global Scope in a View

```python
# global setting for discount
DISCOUNT_RATE = 0.1  # 10% discount

def calculate_price(price):
    discount = price * DISCOUNT_RATE  # uses global DISCOUNT_RATE
    final_price = price - discount  # local variable
    return final_price

def product_view(request):
    product_price = 100  # local variable inside view
    price_after_discount = calculate_price(product_price)
    return f"Price after discount is {price_after_discount}"
```

**What’s happening?**

* `DISCOUNT_RATE` is global, used inside function `calculate_price`.
* Variables like `discount`, `final_price`, and `product_price` are local to their functions.
* Keeping `DISCOUNT_RATE` global means you can change discount easily in one place.

---

### 2) DevOps Example — Using Global and Local Variables in a Script

```python
# Global variable: config for server address
SERVER = "192.168.1.10"

def deploy_app():
    print(f"Deploying app to server {SERVER}")
    logs = "/var/logs/deploy.log"  # local variable
    # simulate deployment steps here
    print(f"Logging deployment details to {logs}")

def main():
    deploy_app()

main()
```

**What’s happening?**

* `SERVER` is global and shared across functions.
* `logs` is local to `deploy_app` and won’t affect anything outside.
* This separation helps keep config variables global but temporary data local.

---

### Why is scope important here?

* If you accidentally create a **local variable named SERVER** inside `deploy_app`, it would hide the global one and may break your deployment.
* If you need to change global variables inside functions, you must use the `global` keyword carefully.
* Using local variables helps keep your functions independent and easier to test.

---



